import TelegramBot, { Message, CallbackQuery } from 'node-telegram-bot-api';
import { config, validateConfig } from './config';
import { geminiService } from './gemini';
import { contextManager } from './utils/context';
import { logger, logUserMessage, logBotResponse, logError, logCommand } from './utils/logger';
import fs from 'fs/promises';

// Initialize bot function
async function initializeBot() {
  // Validate configuration
  if (!validateConfig()) {
    process.exit(1);
  }

  // Initialize bot
  const bot = new TelegramBot(config.telegram.token, { polling: true });

  // Load custom prompt
  let customPrompt: any = {};
  try {
    const promptData = await fs.readFile('./src/prompt.json', 'utf-8');
    customPrompt = JSON.parse(promptData);
  } catch (error) {
    logger.warn('Could not load custom prompt, using defaults');
  }

  // Initialize context manager
  await contextManager.initialize();

  // Bot commands and handlers
  const commands = {
    start: '/start - –ù–∞—á–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É',
    help: '/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É',
    reset: '/reset - –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ',
    persona: '/persona <—Ä–æ–ª—å> - –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è',
    memory: '/memory - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å',
    stats: '/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è',
    support: 'üí¨ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É',
    sobriety: 'üåø –û–±—Å—É–¥–∏—Ç—å —Ç—Ä–µ–∑–≤–æ—Å—Ç—å',
  };

  // Start command
  bot.onText(/\/start/, async (msg: Message) => {
    const chatId = msg.chat.id;
    const userId = msg.from?.id;
    
    if (!userId) return;
    
    try {
      await contextManager.getUserSession(chatId, userId, msg.from);
      
      const welcomeMessage = customPrompt.response_templates?.greeting || 
        '–ü—Ä–∏–≤–µ—Ç, –ú–∞–∫—Å–∏–º üåø –Ø —Ä–∞–¥, —á—Ç–æ —Ç—ã –∑–¥–µ—Å—å. –ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–≥–æ–¥–Ω—è?';
      
      await bot.sendMessage(chatId, welcomeMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'support' },
              { text: 'üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data: 'reset' }
            ],
            [
              { text: 'üåø –¢—Ä–µ–∑–≤–æ—Å—Ç—å', callback_data: 'sobriety' },
              { text: 'üìä –ü—Ä–æ–≥—Ä–µ—Å—Å', callback_data: 'stats' }
            ]
          ]
        }
      });
      
      logCommand(userId, 'start');
    } catch (error) {
      logError(error as Error, 'start command');
      await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // Help command
  bot.onText(/\/help/, async (msg: Message) => {
    const chatId = msg.chat.id;
    const userId = msg.from?.id;
    
    if (!userId) return;
    
    const helpText = `
üåø *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø–æ–º–æ—â—å*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
${Object.values(commands).join('\n')}

*–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å:*
‚Ä¢ üí¨ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
‚Ä¢ üåø –ú–æ—Ç–∏–≤–∞—Ü–∏—è –∫ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é
‚Ä¢ üß† –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ-–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏
‚Ä¢ üí≠ –†–∞–±–æ—Ç–∞ —Å —á—É–≤—Å—Ç–≤–æ–º –≤–∏–Ω—ã –∏ —É—Ç—Ä–∞—Ç–æ–π
‚Ä¢ üò¥ –ü–æ–º–æ—â—å —Å–æ —Å–Ω–æ–º –∏ —Å—Ç—Ä–µ—Å—Å–æ–º

*–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ:*
‚Ä¢ –ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å
‚Ä¢ –û —Å–≤–æ–∏—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è—Ö
‚Ä¢ –û —Ç—è–≥–µ –∫ –∞–ª–∫–æ–≥–æ–ª—é
‚Ä¢ –û –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å–æ —Å–Ω–æ–º
‚Ä¢ –û –ª—é–±—ã—Ö —Ç—Ä—É–¥–Ω–æ—Å—Ç—è—Ö

*–í–∞–∂–Ω–æ:* –Ø –Ω–µ –∑–∞–º–µ–Ω—è—é –≤—Ä–∞—á–∞, –Ω–æ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è üôè
    `;
    
    await bot.sendMessage(chatId, helpText, { parse_mode: 'Markdown' });
    logCommand(userId, 'help');
  });

  // Reset command
  bot.onText(/\/reset/, async (msg: Message) => {
    const chatId = msg.chat.id;
    const userId = msg.from?.id;
    
    if (!userId) return;
    
    try {
      await contextManager.clearHistory(userId);
      await bot.sendMessage(chatId, 'üåø –•–æ—Ä–æ—à–æ, –ú–∞–∫—Å–∏–º. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞. –ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–π—á–∞—Å?');
      logCommand(userId, 'reset');
    } catch (error) {
      logError(error as Error, 'reset command');
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏.');
    }
  });

  // Persona command
  bot.onText(/\/persona (.+)/, async (msg: Message, match: RegExpExecArray | null) => {
    const chatId = msg.chat.id;
    const userId = msg.from?.id;
    const persona = match?.[1];
    
    if (!userId || !persona) return;
    
    try {
      await contextManager.updateUserMemory(userId, {
        communicationStyle: persona
      });
      
      await bot.sendMessage(chatId, `‚úÖ –†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: *${persona}*`, { 
        parse_mode: 'Markdown' 
      });
      logCommand(userId, 'persona', [persona]);
    } catch (error) {
      logError(error as Error, 'persona command');
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏.');
    }
  });

  // Memory command
  bot.onText(/\/memory/, async (msg: Message) => {
    const chatId = msg.chat.id;
    const userId = msg.from?.id;
    
    if (!userId) return;
    
    try {
      const memory = await contextManager.getUserMemory(userId);
      
      if (!memory) {
        await bot.sendMessage(chatId, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        return;
      }
      
      const memoryText = `
üß† *–í–∞—à–∞ –ø–∞–º—è—Ç—å:*

*–ò–Ω—Ç–µ—Ä–µ—Å—ã:* ${memory.interests.length > 0 ? memory.interests.join(', ') : '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
*–¶–µ–ª–∏:* ${memory.goals.length > 0 ? memory.goals.join(', ') : '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
*–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:* ${memory.communicationStyle}
*–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:* ${Object.keys(memory.preferences).length > 0 ? 
        Object.entries(memory.preferences).map(([k, v]) => `${k}: ${v}`).join(', ') : '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
      `;
      
      await bot.sendMessage(chatId, memoryText, { parse_mode: 'Markdown' });
      logCommand(userId, 'memory');
    } catch (error) {
      logError(error as Error, 'memory command');
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.');
    }
  });

  // Stats command
  bot.onText(/\/stats/, async (msg: Message) => {
    const chatId = msg.chat.id;
    const userId = msg.from?.id;
    
    if (!userId) return;
    
    try {
      const stats = await contextManager.getStatistics();
      
      const statsText = `
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}
üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${stats.totalMessages}
üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–±—Ä–æ—Å: ${new Date(stats.lastReset).toLocaleString('ru-RU')}
      `;
      
      await bot.sendMessage(chatId, statsText, { parse_mode: 'Markdown' });
      logCommand(userId, 'stats');
    } catch (error) {
      logError(error as Error, 'stats command');
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
  });

  // Handle text messages
  bot.on('message', async (msg: Message) => {
    const chatId = msg.chat.id;
    const userId = msg.from?.id;
    const text = msg.text;
    
    if (!userId || !text || text.startsWith('/')) return;
    
    try {
      // Log user message
      logUserMessage(userId, text);
      
      // Get or create user session
      const userSession = await contextManager.getUserSession(chatId, userId, msg.from);
      
      // Add user message to history
      await contextManager.addMessage(userId, {
        role: 'user',
        content: text,
        timestamp: Date.now(),
        messageType: 'text',
      });
      
      // Show typing indicator
      await bot.sendChatAction(chatId, 'typing');
      
      // Get user memory for context
      const userMemory = await contextManager.getUserMemory(userId);
      
      // Get conversation history
      const history = await contextManager.getHistory(userId);
      
      // Generate AI response
      const startTime = Date.now();
      const response = await geminiService.generateResponse(history, userMemory);
      const processingTime = Date.now() - startTime;
      
      // Add AI response to history
      await contextManager.addMessage(userId, {
        role: 'assistant',
        content: response.text,
        timestamp: Date.now(),
      });
      
      // Send response with Markdown support
      const parseMode = config.bot.enableMarkdown ? 'Markdown' : undefined;
      await bot.sendMessage(chatId, response.text, { 
        parse_mode: parseMode,
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üëç', callback_data: 'like' },
              { text: 'üëé', callback_data: 'dislike' }
            ]
          ]
        }
      });
      
      // Log bot response
      logBotResponse(userId, response.text, processingTime);
      
    } catch (error) {
      logError(error as Error, 'text message handling');
      await bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  });

  // Handle photo messages
  bot.on('photo', async (msg: Message) => {
    const chatId = msg.chat.id;
    const userId = msg.from?.id;
    
    if (!userId) return;
    
    try {
      // Get the largest photo
      const photo = msg.photo?.[msg.photo.length - 1];
      if (!photo) return;
      
      // Download photo
      const fileLink = await bot.getFileLink(photo.file_id);
      const response = await fetch(fileLink);
      const imageBuffer = Buffer.from(await response.arrayBuffer());
      
      // Log image message
      logUserMessage(userId, '[IMAGE]', 'image');
      
      // Get user session
      const userSession = await contextManager.getUserSession(chatId, userId, msg.from);
      
      // Show typing indicator
      await bot.sendChatAction(chatId, 'typing');
      
      // Analyze image
      const analysis = await geminiService.analyzeImage(imageBuffer);
      
      // Add to history
      await contextManager.addMessage(userId, {
        role: 'user',
        content: '[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ]',
        timestamp: Date.now(),
        messageType: 'image',
      });
      
      await contextManager.addMessage(userId, {
        role: 'assistant',
        content: analysis,
        timestamp: Date.now(),
      });
      
      // Send analysis
      await bot.sendMessage(chatId, `üñºÔ∏è *–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:*\n\n${analysis}`, {
        parse_mode: 'Markdown'
      });
      
      logBotResponse(userId, analysis, 0);
      
    } catch (error) {
      logError(error as Error, 'photo handling');
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
    }
  });

  // Handle voice messages
  bot.on('voice', async (msg: Message) => {
    const chatId = msg.chat.id;
    const userId = msg.from?.id;
    
    if (!userId || !config.bot.enableVoiceRecognition) return;
    
    try {
      // Download voice file
      const fileLink = await bot.getFileLink(msg.voice!.file_id);
      const response = await fetch(fileLink);
      const voiceBuffer = Buffer.from(await response.arrayBuffer());
      
      // Log voice message
      logUserMessage(userId, '[VOICE]', 'voice');
      
      // For now, just acknowledge the voice message
      // In a real implementation, you would use speech-to-text API
      await bot.sendMessage(chatId, 'üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.');
      
    } catch (error) {
      logError(error as Error, 'voice handling');
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
    }
  });

  // Handle callback queries (inline buttons)
  bot.on('callback_query', async (callbackQuery: CallbackQuery) => {
    const chatId = callbackQuery.message?.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;
    
    if (!chatId || !data) return;
    
    try {
      switch (data) {
        case 'support':
          await bot.answerCallbackQuery(callbackQuery.id);
          await bot.sendMessage(chatId, 'üí¨ –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è. –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –¥–µ–ª–∞? –ß—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç?');
          break;
          
        case 'reset':
          await bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ üåø' });
          await contextManager.clearHistory(userId);
          break;
          
        case 'sobriety':
          await bot.answerCallbackQuery(callbackQuery.id);
          await bot.sendMessage(chatId, 'üåø –ö–∞–∂–¥—ã–π —Ç—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ –ø–æ–±–µ–¥–∞. –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–≤–æ—è —Ç—Ä–µ–∑–≤–æ—Å—Ç—å? –ï—Å—Ç—å –ª–∏ —Ç—è–≥–∞?');
          break;
          
        case 'stats':
          await bot.answerCallbackQuery(callbackQuery.id);
          const stats = await contextManager.getStatistics();
          await bot.sendMessage(chatId, `üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${stats.totalMessages} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ö–∞–∂–¥—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä ‚Äî —à–∞–≥ –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é üí™`);
          break;
          
        case 'like':
          await bot.answerCallbackQuery(callbackQuery.id, { text: '–†–∞–¥, —á—Ç–æ –ø–æ–º–æ–≥! üôè' });
          break;
          
        case 'dislike':
          await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ-–¥—Ä—É–≥–æ–º—É üí≠' });
          break;
      }
    } catch (error) {
      logError(error as Error, 'callback query handling');
    }
  });

  // Error handling
  bot.on('error', (error: Error) => {
    logError(error, 'bot error');
  });

  bot.on('polling_error', (error: Error) => {
    logError(error, 'polling error');
  });

  // Graceful shutdown
  process.on('SIGINT', async () => {
    logger.info('Shutting down bot...');
    await bot.stopPolling();
    process.exit(0);
  });

  process.on('SIGTERM', async () => {
    logger.info('Shutting down bot...');
    await bot.stopPolling();
    process.exit(0);
  });

  // Start the bot
  logger.info('ü§ñ Telegram bot started successfully!');
  logger.info(`üìä Configuration: ${config.gemini.model}, max history: ${config.bot.maxHistoryLength}`);

  // Cleanup inactive users every 24 hours
  setInterval(async () => {
    try {
      await contextManager.cleanupInactiveUsers(30);
    } catch (error) {
      logError(error as Error, 'cleanup task');
    }
  }, 24 * 60 * 60 * 1000);
}

// Start the bot
initializeBot().catch((error) => {
  logger.error('Failed to initialize bot', { error });
  process.exit(1);
});